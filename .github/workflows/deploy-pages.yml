name: Deploy Website

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      force-deploy:
        description: Deploy to GitHub Pages even if not on main branch
        required: false
        default: false
        type: boolean

permissions:
  contents: write # Changed from read to write for gh-pages branch management
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      should-deploy-pages: ${{ steps.check-deploy.outputs.should-deploy-pages }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build site data
        run: |
          npm run build
          npm run build:website

      - name: Check deployment conditions
        id: check-deploy
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.inputs.force-deploy }}" == "true" ]]; then
            echo "should-deploy-pages=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy-pages=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Pages
        if: steps.check-deploy.outputs.should-deploy-pages == 'true'
        uses: actions/configure-pages@v5

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v4
        if: steps.check-deploy.outputs.should-deploy-pages == 'true'
        with:
          path: "./docs"

  deploy-vercel:
    runs-on: ubuntu-latest
    needs: build
    if: false
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build site data for Vercel
        run: |
          npm run build
          npm run build:website

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts for Vercel
        run: vercel build ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy-vercel
        run: |
          url=$(vercel deploy --prebuilt ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT

      - name: Comment PR with Vercel preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview deployment')
            );

            const body = `## Preview deployment

            ✅ **Preview deployed successfully!**

            🔗 **Preview URL:** ${{ steps.deploy-vercel.outputs.url }}

            This preview will be updated automatically when you push new commits to this PR.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  deploy-netlify:
    runs-on: ubuntu-latest
    needs: build
    if: false
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build site data for Netlify
        run: |
          npm run build
          npm run build:website

      - name: Deploy to Netlify
        id: deploy-netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: "./docs"
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions - PR #${{ github.event.number }}"
          enable-pull-request-comment: false
          enable-commit-comment: false
          overwrites-pull-request-comment: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Comment PR with Netlify preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Netlify Preview deployment')
            );

            const body = `## Netlify Preview deployment

            ✅ **Preview deployed successfully!**

            🔗 **Netlify Preview URL:** ${{ steps.deploy-netlify.outputs.deploy-url }}

            This preview will be updated automatically when you push new commits to this PR.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  deploy-pages:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      # https://github.com/actions/checkout#checkout-multiple-repos-side-by-side
      - name: Checkout
        uses: actions/checkout@v5
        with:
          path: repo

      - name: Ensure gh-pages branch exists
        working-directory: repo
        run: |
          set -e
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if git ls-remote --heads origin gh-pages | grep -q 'refs/heads/gh-pages'; then
            echo "gh-pages branch already exists"
          else
            echo "gh-pages branch not found — creating an empty gh-pages branch and pushing it"
            git checkout --orphan gh-pages
            git rm -rf . > /dev/null 2>&1 || true

            # Configure a committer for the automated commit so it won't fail
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"

            git commit --allow-empty -m "Initialize empty gh-pages branch"
            git push --set-upstream origin gh-pages
            git checkout "$CURRENT_BRANCH"
          fi

      - name: Checkout gh-pages
        uses: actions/checkout@v5
        id: checkout-gh-pages
        with:
          ref: gh-pages
          path: gh-pages

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "repo/package-lock.json"

      - name: Install dependencies
        working-directory: repo
        run: npm ci

      - name: Build site data for PR preview
        working-directory: repo
        run: |
          npm run build
          npm run build:website

      - name: Setup git config
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create PR preview deployment
        id: pr-preview
        working-directory: gh-pages
        if: github.event_name == 'pull_request'
        run: |
          set -e
          PR_NUMBER="${{ github.event.number }}"
          TIMESTAMP=$(date +%s)
          PREVIEW_DIR="previews/pr${PR_NUMBER}-${TIMESTAMP}"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="$(echo "${{ github.repository }}" | sed "s|^$REPO_OWNER/||")"

          PREVIEW_URL="https://$REPO_OWNER.github.io/$REPO_NAME/${PREVIEW_DIR}/"
          echo "preview-dir=${PREVIEW_DIR}" >> $GITHUB_OUTPUT
          echo "preview-url=${PREVIEW_URL}" >> $GITHUB_OUTPUT

          # Create/update the preview directory and copy built site from the repo checkout
          mkdir -p "${PREVIEW_DIR}"
          cp -r ../repo/docs/* "${PREVIEW_DIR}/" || true

      - name: Generate previews index
        working-directory: gh-pages
        if: github.event_name == 'pull_request'
        run: |
          set -e
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="$(echo "${{ github.repository }}" | sed "s|^$REPO_OWNER/||")"

          # Ensure previews directory exists
          mkdir -p previews

          # Generate HTML content for the index
          cat > previews/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Preview Deployments - Awesome Copilot</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Noto Sans', Helvetica, Arial, sans-serif;
                      line-height: 1.6;
                      color: #24292f;
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 20px;
                      background-color: #ffffff;
                  }
                  .header {
                      border-bottom: 1px solid #d1d9e0;
                      padding-bottom: 20px;
                      margin-bottom: 20px;
                  }
                  h1 {
                      color: #0969da;
                      margin: 0;
                  }
                  .description {
                      color: #656d76;
                      margin-top: 8px;
                  }
                  .preview-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
                      gap: 20px;
                      margin-top: 20px;
                  }
                  .preview-card {
                      border: 1px solid #d1d9e0;
                      border-radius: 6px;
                      padding: 16px;
                      background: #f6f8fa;
                      transition: box-shadow 0.2s;
                  }
                  .preview-card:hover {
                      box-shadow: 0 1px 3px rgba(0,0,0,0.12);
                  }
                  .preview-title {
                      font-weight: 600;
                      margin: 0 0 8px 0;
                      color: #0969da;
                  }
                  .preview-date {
                      color: #656d76;
                      font-size: 0.875rem;
                      margin-bottom: 12px;
                  }
                  .preview-link {
                      display: inline-block;
                      background: #0969da;
                      color: white;
                      padding: 6px 12px;
                      text-decoration: none;
                      border-radius: 6px;
                      font-size: 0.875rem;
                      transition: background-color 0.2s;
                  }
                  .preview-link:hover {
                      background: #0550ae;
                  }
                  .no-previews {
                      text-align: center;
                      color: #656d76;
                      padding: 40px;
                      background: #f6f8fa;
                      border-radius: 6px;
                      border: 1px solid #d1d9e0;
                  }
                  .main-site-link {
                      background: #1f883d;
                      color: white;
                      padding: 12px 24px;
                      text-decoration: none;
                      border-radius: 6px;
                      display: inline-block;
                      margin-bottom: 30px;
                      font-weight: 500;
                  }
                  .main-site-link:hover {
                      background: #1a7f37;
                  }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>🚀 Preview Deployments</h1>
                  <p class="description">Browse all available PR preview deployments for the Awesome Copilot project</p>
                  <a href="https://REPO_OWNER.github.io/REPO_NAME/" class="main-site-link">← Back to Main Site</a>
              </div>
              
              <div id="preview-list">
                  <div class="no-previews">
                      <h3>No preview deployments found</h3>
                      <p>Preview deployments will appear here when pull requests are created.</p>
                  </div>
              </div>
              
              <script>
                  // This will be populated by the build script
                  const previews = PREVIEW_DATA_PLACEHOLDER;
                  
                  function formatDate(timestamp) {
                      const date = new Date(timestamp * 1000);
                      return date.toLocaleDateString('en-US', {
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric',
                          hour: '2-digit',
                          minute: '2-digit'
                      });
                  }
                  
                  function renderPreviews() {
                      const container = document.getElementById('preview-list');
                      
                      if (previews.length === 0) {
                          return; // Keep the "no previews" message
                      }
                      
                      const grid = document.createElement('div');
                      grid.className = 'preview-grid';
                      
                      previews.forEach(preview => {
                          const card = document.createElement('div');
                          card.className = 'preview-card';
                          
                          const prNumber = preview.name.match(/pr(\d+)-/)?.[1] || 'Unknown';
                          const timestamp = preview.name.match(/-(\d+)$/)?.[1];
                          const dateStr = timestamp ? formatDate(parseInt(timestamp)) : 'Unknown date';
                          
                          card.innerHTML = `
                              <h3 class="preview-title"><a href="https://github.com/REPO_OWNER/REPO_NAME/pull/${prNumber}">PR #${prNumber}</a></h3>
                              <div class="preview-date">Deployed: ${dateStr}</div>
                              <a href="${preview.url}" class="preview-link">View Preview →</a>
                          `;
                          
                          grid.appendChild(card);
                      });
                      
                      container.innerHTML = '';
                      container.appendChild(grid);
                  }
                  
                  renderPreviews();
              </script>
          </body>
          </html>
          EOF

          # Collect all preview directories and generate JSON data
          PREVIEW_DATA="["
          FIRST=true

          if [ -d previews ]; then
            for preview_dir in previews/pr*-*; do
              if [ -d "$preview_dir" ] && [ "$preview_dir" != "previews/pr*-*" ]; then
                folder_name=$(basename "$preview_dir")
                preview_url="https://$REPO_OWNER.github.io/$REPO_NAME/${preview_dir}/"
                
                if [ "$FIRST" = true ]; then
                  FIRST=false
                else
                  PREVIEW_DATA="$PREVIEW_DATA,"
                fi
                
                PREVIEW_DATA="$PREVIEW_DATA{\"name\":\"$folder_name\",\"url\":\"$preview_url\"}"
              fi
            done
          fi

          PREVIEW_DATA="$PREVIEW_DATA]"

          # Replace placeholders in the HTML
          sed -i "s|REPO_OWNER|$REPO_OWNER|g" previews/index.html
          sed -i "s|REPO_NAME|$REPO_NAME|g" previews/index.html
          sed -i "s|PREVIEW_DATA_PLACEHOLDER|$PREVIEW_DATA|g" previews/index.html

          echo "Generated previews index with $(echo "$PREVIEW_DATA" | grep -o '{' | wc -l) preview(s)"

      - name: Remove old PR previews
        working-directory: gh-pages
        run: |
          # Remove previews older than 30 days
          if [ -d previews ]; then
            find previews -maxdepth 1 -type d -name "pr*-*" | while read preview_folder; do
              folder_epoch=$(echo "$preview_folder" | sed 's/.*-\([0-9]\{10,\}\)$/\1/')
              if [[ "$folder_epoch" =~ ^[0-9]{10,}$ ]]; then
                folder_timestamp="$folder_epoch"
                current_timestamp=$(date +%s)
                thirty_days_ago=$((current_timestamp - 30 * 24 * 60 * 60))
                if [[ "$folder_timestamp" -lt "$thirty_days_ago" && "$folder_timestamp" -gt "0" ]]; then
                  echo "Removing old preview: $preview_folder (older than 30 days)"
                  rm -rf "$preview_folder"
                fi
              fi
            done
          fi

      - name: Add Main
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: gh-pages
        run: |
          cp -r ../repo/docs/* ./ || true

      - name: Commit and push
        working-directory: gh-pages
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add/update PR #${{ github.event.number }} preview deployment"
            git push origin HEAD:gh-pages
          fi

      - name: Comment PR with GitHub Pages preview URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        continue-on-error: true
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // const botComment = comments.find(comment => 
            //   comment.user.type === 'Bot' && 
            //   comment.body.includes('GitHub Pages Preview deployment')
            // );

            const body = `## GitHub Pages Preview deployment

            ✅ **Preview deployed at:** ${{ steps.pr-preview.outputs.preview-url }}
            🧹 **Cleanup:** Preview folders older than 30 days are automatically removed.`;

            // if (botComment) {
            //   await github.rest.issues.updateComment({
            //     owner: context.repo.owner,
            //     repo: context.repo.repo,
            //     comment_id: botComment.id,
            //     body: body
            //   });
            // } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
            // }

  # deploy-pages:
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: needs.build.outputs.should-deploy-pages == 'true'
  #   steps:
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4
