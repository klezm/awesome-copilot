name: Deploy Website

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      force-deploy:
        description: Deploy to GitHub Pages even if not on main branch
        required: false
        default: false
        type: boolean

permissions:
  contents: write # Changed from read to write for gh-pages branch management
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      should-deploy-pages: ${{ steps.check-deploy.outputs.should-deploy-pages }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build site data
        run: |
          npm run build
          npm run build:website

      - name: Check deployment conditions
        id: check-deploy
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.inputs.force-deploy }}" == "true" ]]; then
            echo "should-deploy-pages=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy-pages=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Pages
        if: steps.check-deploy.outputs.should-deploy-pages == 'true'
        uses: actions/configure-pages@v5

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v4
        if: steps.check-deploy.outputs.should-deploy-pages == 'true'
        with:
          path: "./docs"

  deploy-vercel:
    runs-on: ubuntu-latest
    needs: build
    if: false
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build site data for Vercel
        run: |
          npm run build
          npm run build:website

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts for Vercel
        run: vercel build ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy-vercel
        run: |
          url=$(vercel deploy --prebuilt ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT

      - name: Comment PR with Vercel preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview deployment')
            );

            const body = `## Preview deployment

            ✅ **Preview deployed successfully!**

            🔗 **Preview URL:** ${{ steps.deploy-vercel.outputs.url }}

            This preview will be updated automatically when you push new commits to this PR.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  deploy-netlify:
    runs-on: ubuntu-latest
    needs: build
    if: false
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build site data for Netlify
        run: |
          npm run build
          npm run build:website

      - name: Deploy to Netlify
        id: deploy-netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: "./docs"
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions - PR #${{ github.event.number }}"
          enable-pull-request-comment: false
          enable-commit-comment: false
          overwrites-pull-request-comment: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Comment PR with Netlify preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Netlify Preview deployment')
            );

            const body = `## Netlify Preview deployment

            ✅ **Preview deployed successfully!**

            🔗 **Netlify Preview URL:** ${{ steps.deploy-netlify.outputs.deploy-url }}

            This preview will be updated automatically when you push new commits to this PR.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  deploy-pages:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      # https://github.com/actions/checkout#checkout-multiple-repos-side-by-side
      - name: Checkout
        uses: actions/checkout@v5
        with:
          path: repo

      - name: Ensure gh-pages branch exists
        working-directory: repo
        run: |
          set -e
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if git ls-remote --heads origin gh-pages | grep -q 'refs/heads/gh-pages'; then
            echo "gh-pages branch already exists"
          else
            echo "gh-pages branch not found — creating an empty gh-pages branch and pushing it"
            git checkout --orphan gh-pages
            git rm -rf . > /dev/null 2>&1 || true

            # Configure a committer for the automated commit so it won't fail
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"

            git commit --allow-empty -m "Initialize empty gh-pages branch"
            git push --set-upstream origin gh-pages
            git checkout "$CURRENT_BRANCH"
          fi

      - name: Checkout gh-pages
        uses: actions/checkout@v5
        id: checkout-gh-pages
        with:
          ref: gh-pages
          path: gh-pages

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "repo/package-lock.json"

      - name: Install dependencies
        working-directory: repo
        run: npm ci

      - name: Build site data for PR preview
        working-directory: repo
        run: |
          npm run build
          npm run build:website

      - name: Setup git config
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create PR preview deployment
        id: pr-preview
        working-directory: gh-pages
        if: github.event_name == 'pull_request'
        run: |
          set -e
          PR_NUMBER="${{ github.event.number }}"
          TIMESTAMP=$(date +%s)
          PREVIEW_DIR="previews/pr${PR_NUMBER}-${TIMESTAMP}"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="$(echo "${{ github.repository }}" | sed "s|^$REPO_OWNER/||")"

          PREVIEW_URL="https://$REPO_OWNER.github.io/$REPO_NAME/${PREVIEW_DIR}/"
          echo "preview-dir=${PREVIEW_DIR}" >> $GITHUB_OUTPUT
          echo "preview-url=${PREVIEW_URL}" >> $GITHUB_OUTPUT

          # Create/update the preview directory and copy built site from the repo checkout
          mkdir -p "${PREVIEW_DIR}"
          cp -r ../repo/docs/* "${PREVIEW_DIR}/" || true

      - name: Generate previews index
        working-directory: gh-pages
        if: github.event_name == 'pull_request'
        run: |
          set -e
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="$(echo "${{ github.repository }}" | sed "s|^$REPO_OWNER/||")"

          # Ensure previews directory exists
          mkdir -p previews

          # Generate HTML content for the index
          cat > previews/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Preview Deployments - Awesome Copilot</title>
              <link rel="icon" href="https://github.githubassets.com/favicons/favicon.svg" type="image/svg+xml">
              <style>
                  /* CSS Reset and Base Styles */
                  * {
                      margin: 0;
                      padding: 0;
                      box-sizing: border-box;
                  }
                  
                  /* Base Typography and Colors */
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Noto Sans', Helvetica, Arial, sans-serif;
                      line-height: 1.6;
                      color: #24292f;
                      background-color: #ffffff;
                      min-height: 100vh;
                  }
                  
                  .container {
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 0 16px;
                  }
                  
                  /* Header Styles */
                  header {
                      background: linear-gradient(135deg, #0366d6 0%, #2188ff 100%);
                      color: white;
                      padding: 2rem 0;
                      text-align: center;
                  }
                  
                  header h1 {
                      font-size: 2.5rem;
                      font-weight: 600;
                      margin-bottom: 0.5rem;
                  }
                  
                  .subtitle {
                      font-size: 1.125rem;
                      opacity: 0.9;
                      margin-bottom: 1.5rem;
                  }
                  
                  .main-site-link {
                      background: rgba(255, 255, 255, 0.2);
                      color: white;
                      padding: 0.75rem 1.5rem;
                      text-decoration: none;
                      border-radius: 6px;
                      display: inline-block;
                      font-weight: 500;
                      transition: background-color 0.2s;
                      border: 1px solid rgba(255, 255, 255, 0.3);
                  }
                  
                  .main-site-link:hover {
                      background: rgba(255, 255, 255, 0.3);
                  }
                  
                  /* Main Content */
                  main {
                      padding: 2rem 0;
                      min-height: calc(100vh - 200px);
                  }
                  
                  .stats {
                      margin-bottom: 2rem;
                      color: #656d76;
                      font-size: 0.875rem;
                      text-align: center;
                  }
                  
                  /* PR Group Styles */
                  .pr-groups {
                      display: flex;
                      flex-direction: column;
                      gap: 2rem;
                  }
                  
                  .pr-group {
                      border: 1px solid #d0d7de;
                      border-radius: 12px;
                      background: #ffffff;
                      overflow: hidden;
                      transition: all 0.2s ease;
                  }
                  
                  .pr-group:hover {
                      border-color: #0366d6;
                      box-shadow: 0 4px 12px rgba(3, 102, 214, 0.1);
                  }
                  
                  .pr-group-header {
                      background: #f6f8fa;
                      padding: 1rem 1.5rem;
                      border-bottom: 1px solid #d0d7de;
                      display: flex;
                      align-items: center;
                      justify-content: space-between;
                      flex-wrap: wrap;
                      gap: 1rem;
                  }
                  
                  .pr-title {
                      font-size: 1.125rem;
                      font-weight: 600;
                      color: #0366d6;
                      text-decoration: none;
                      display: flex;
                      align-items: center;
                      gap: 0.5rem;
                  }
                  
                  .pr-title:hover {
                      text-decoration: underline;
                  }
                  
                  .pr-meta {
                      color: #656d76;
                      font-size: 0.875rem;
                      display: flex;
                      align-items: center;
                      gap: 1rem;
                      flex-wrap: wrap;
                  }
                  
                  .preview-count {
                      background: #0366d6;
                      color: white;
                      padding: 0.25rem 0.5rem;
                      border-radius: 12px;
                      font-size: 0.75rem;
                      font-weight: 500;
                  }
                  
                  /* Timeline Styles */
                  .preview-timeline {
                      position: relative;
                      padding: 1.5rem;
                  }
                  
                  .preview-timeline::before {
                      content: '';
                      position: absolute;
                      left: 2rem;
                      top: 0;
                      bottom: 0;
                      width: 2px;
                      background: linear-gradient(to bottom, #0366d6, #d0d7de);
                  }
                  
                  .preview-item {
                      position: relative;
                      padding-left: 3rem;
                      margin-bottom: 1.5rem;
                      display: flex;
                      align-items: center;
                      justify-content: space-between;
                      flex-wrap: wrap;
                      gap: 1rem;
                  }
                  
                  .preview-item:last-child {
                      margin-bottom: 0;
                  }
                  
                  .preview-item::before {
                      content: '';
                      position: absolute;
                      left: 1.5rem;
                      top: 50%;
                      transform: translateY(-50%);
                      width: 12px;
                      height: 12px;
                      border-radius: 50%;
                      background: #0366d6;
                      border: 3px solid #ffffff;
                      box-shadow: 0 0 0 1px #d0d7de;
                  }
                  
                  .preview-item.latest::before {
                      background: #1f883d;
                      width: 16px;
                      height: 16px;
                      left: 1.25rem;
                      animation: pulse 2s infinite;
                  }
                  
                  .preview-item.older {
                      opacity: 0.7;
                  }
                  
                  .preview-item.older::before {
                      background: #8b949e;
                  }
                  
                  @keyframes pulse {
                      0% {
                          box-shadow: 0 0 0 0 rgba(31, 136, 61, 0.7), 0 0 0 1px #d0d7de;
                      }
                      70% {
                          box-shadow: 0 0 0 10px rgba(31, 136, 61, 0), 0 0 0 1px #d0d7de;
                      }
                      100% {
                          box-shadow: 0 0 0 0 rgba(31, 136, 61, 0), 0 0 0 1px #d0d7de;
                      }
                  }
                  
                  .preview-info {
                      flex: 1;
                      min-width: 200px;
                  }
                  
                  .preview-date {
                      color: #656d76;
                      font-size: 0.875rem;
                      margin-bottom: 0.25rem;
                      font-weight: 500;
                  }
                  
                  .preview-age {
                      color: #8b949e;
                      font-size: 0.75rem;
                  }
                  
                  .preview-actions {
                      display: flex;
                      gap: 0.5rem;
                      align-items: center;
                  }
                  
                  .preview-link {
                      background: #0366d6;
                      color: white;
                      padding: 0.5rem 1rem;
                      text-decoration: none;
                      border-radius: 6px;
                      font-size: 0.875rem;
                      font-weight: 500;
                      transition: all 0.2s ease;
                      display: inline-flex;
                      align-items: center;
                      gap: 0.25rem;
                  }
                  
                  .preview-link:hover {
                      background: #0256cc;
                      transform: translateY(-1px);
                  }
                  
                  .preview-link.latest {
                      background: #1f883d;
                      box-shadow: 0 0 0 2px rgba(31, 136, 61, 0.2);
                  }
                  
                  .preview-link.latest:hover {
                      background: #1a7f37;
                  }
                  
                  .latest-badge {
                      background: #1f883d;
                      color: white;
                      padding: 0.125rem 0.5rem;
                      border-radius: 12px;
                      font-size: 0.625rem;
                      font-weight: 600;
                      text-transform: uppercase;
                      letter-spacing: 0.5px;
                  }
                  
                  /* No Previews State */
                  .no-previews {
                      text-align: center;
                      color: #656d76;
                      padding: 3rem 2rem;
                      background: #f6f8fa;
                      border-radius: 12px;
                      border: 1px solid #d0d7de;
                  }
                  
                  .no-previews h3 {
                      margin-bottom: 0.5rem;
                      color: #24292f;
                  }
                  
                  /* Responsive Design */
                  @media (max-width: 768px) {
                      header h1 {
                          font-size: 2rem;
                      }
                      
                      .subtitle {
                          font-size: 1rem;
                      }
                      
                      .pr-group-header {
                          flex-direction: column;
                          align-items: flex-start;
                          gap: 0.75rem;
                      }
                      
                      .preview-item {
                          flex-direction: column;
                          align-items: flex-start;
                          gap: 0.75rem;
                      }
                      
                      .preview-timeline::before {
                          left: 1.5rem;
                      }
                      
                      .preview-item {
                          padding-left: 2.5rem;
                      }
                      
                      .preview-item::before {
                          left: 1rem;
                      }
                      
                      .preview-item.latest::before {
                          left: 0.75rem;
                      }
                  }
                  
                  /* Dark mode support */
                  @media (prefers-color-scheme: dark) {
                      body {
                          background-color: #0d1117;
                          color: #e6edf3;
                      }
                      
                      header {
                          background: linear-gradient(135deg, #1f6feb 0%, #388bfd 100%);
                      }
                      
                      .pr-group {
                          background-color: #161b22;
                          border-color: #30363d;
                      }
                      
                      .pr-group:hover {
                          border-color: #1f6feb;
                          box-shadow: 0 4px 12px rgba(31, 111, 235, 0.1);
                      }
                      
                      .pr-group-header {
                          background-color: #21262d;
                          border-bottom-color: #30363d;
                      }
                      
                      .pr-title {
                          color: #58a6ff;
                      }
                      
                      .pr-meta {
                          color: #8b949e;
                      }
                      
                      .preview-count {
                          background-color: #1f6feb;
                      }
                      
                      .preview-timeline::before {
                          background: linear-gradient(to bottom, #1f6feb, #30363d);
                      }
                      
                      .preview-item::before {
                          background: #1f6feb;
                          border-color: #161b22;
                          box-shadow: 0 0 0 1px #30363d;
                      }
                      
                      .preview-item.latest::before {
                          background: #3fb950;
                      }
                      
                      .preview-item.older::before {
                          background: #6e7681;
                      }
                      
                      .preview-date {
                          color: #8b949e;
                      }
                      
                      .preview-age {
                          color: #6e7681;
                      }
                      
                      .preview-link {
                          background-color: #1f6feb;
                      }
                      
                      .preview-link:hover {
                          background-color: #1a5feb;
                      }
                      
                      .preview-link.latest {
                          background-color: #238636;
                      }
                      
                      .preview-link.latest:hover {
                          background-color: #2ea043;
                      }
                      
                      .latest-badge {
                          background-color: #238636;
                      }
                      
                      .no-previews {
                          background-color: #161b22;
                          border-color: #30363d;
                          color: #8b949e;
                      }
                      
                      .no-previews h3 {
                          color: #e6edf3;
                      }
                      
                      .stats {
                          color: #8b949e;
                      }
                      
                      @keyframes pulse {
                          0% {
                              box-shadow: 0 0 0 0 rgba(59, 185, 80, 0.7), 0 0 0 1px #30363d;
                          }
                          70% {
                              box-shadow: 0 0 0 10px rgba(59, 185, 80, 0), 0 0 0 1px #30363d;
                          }
                          100% {
                              box-shadow: 0 0 0 0 rgba(59, 185, 80, 0), 0 0 0 1px #30363d;
                          }
                      }
                  }
              </style>
          </head>
          <body>
              <header>
                  <div class="container">
                      <h1>🚀 Preview Deployments</h1>
                      <p class="subtitle">Browse all available PR preview deployments for the Awesome Copilot project</p>
                      <a href="https://REPO_OWNER.github.io/REPO_NAME/" class="main-site-link">← Back to Main Site</a>
                  </div>
              </header>
              
              <main>
                  <div class="container">
                      <div class="stats">
                          <span id="stats-text">Loading preview deployments...</span>
                      </div>
                      
                      <div id="preview-list">
                          <div class="no-previews">
                              <h3>No preview deployments found</h3>
                              <p>Preview deployments will appear here when pull requests are created.</p>
                          </div>
                      </div>
                  </div>
              </main>
              
              <script>
                  // This will be populated by the build script
                  const previews = PREVIEW_DATA_PLACEHOLDER;
                  
                  function formatDate(timestamp) {
                      const date = new Date(timestamp * 1000);
                      return date.toLocaleDateString('en-US', {
                          year: 'numeric',
                          month: 'short',
                          day: 'numeric',
                          hour: '2-digit',
                          minute: '2-digit'
                      });
                  }
                  
                  function formatRelativeTime(timestamp) {
                      const now = Date.now();
                      const diff = now - (timestamp * 1000);
                      const minutes = Math.floor(diff / (1000 * 60));
                      const hours = Math.floor(diff / (1000 * 60 * 60));
                      const days = Math.floor(diff / (1000 * 60 * 60 * 24));
                      
                      if (days > 0) {
                          return `${days} day${days === 1 ? '' : 's'} ago`;
                      } else if (hours > 0) {
                          return `${hours} hour${hours === 1 ? '' : 's'} ago`;
                      } else if (minutes > 0) {
                          return `${minutes} minute${minutes === 1 ? '' : 's'} ago`;
                      } else {
                          return 'Just now';
                      }
                  }
                  
                  function groupPreviewsByPR(previews) {
                      const groups = {};
                      
                      previews.forEach(preview => {
                          const prMatch = preview.name.match(/pr(\d+)-(\d+)$/);
                          if (prMatch) {
                              const prNumber = prMatch[1];
                              const timestamp = parseInt(prMatch[2]);
                              
                              if (!groups[prNumber]) {
                                  groups[prNumber] = [];
                              }
                              
                              groups[prNumber].push({
                                  ...preview,
                                  prNumber,
                                  timestamp
                              });
                          }
                      });
                      
                      // Sort previews within each group by timestamp (newest first)
                      Object.keys(groups).forEach(prNumber => {
                          groups[prNumber].sort((a, b) => b.timestamp - a.timestamp);
                      });
                      
                      // Convert to array and sort by newest preview in each group
                      return Object.keys(groups)
                          .map(prNumber => ({
                              prNumber,
                              previews: groups[prNumber],
                              latestTimestamp: groups[prNumber][0].timestamp
                          }))
                          .sort((a, b) => b.latestTimestamp - a.latestTimestamp);
                  }
                  
                  function renderPreviews() {
                      const container = document.getElementById('preview-list');
                      const statsElement = document.getElementById('stats-text');
                      
                      if (previews.length === 0) {
                          statsElement.textContent = 'No preview deployments available';
                          return; // Keep the "no previews" message
                      }
                      
                      const groupedPreviews = groupPreviewsByPR(previews);
                      const totalPreviews = previews.length;
                      const totalPRs = groupedPreviews.length;
                      
                      statsElement.textContent = `Found ${totalPreviews} preview deployment${totalPreviews === 1 ? '' : 's'} across ${totalPRs} pull request${totalPRs === 1 ? '' : 's'}`;
                      
                      const prGroupsContainer = document.createElement('div');
                      prGroupsContainer.className = 'pr-groups';
                      
                      groupedPreviews.forEach(group => {
                          const prGroup = document.createElement('div');
                          prGroup.className = 'pr-group';
                          
                          const header = document.createElement('div');
                          header.className = 'pr-group-header';
                          
                          const title = document.createElement('a');
                          title.className = 'pr-title';
                          title.href = `https://github.com/REPO_OWNER/REPO_NAME/pull/${group.prNumber}`;
                          title.target = '_blank';
                          title.rel = 'noopener noreferrer';
                          title.innerHTML = `<span>📋</span> Pull Request #${group.prNumber}`;
                          
                          const meta = document.createElement('div');
                          meta.className = 'pr-meta';
                          
                          const count = document.createElement('span');
                          count.className = 'preview-count';
                          count.textContent = `${group.previews.length} deployment${group.previews.length === 1 ? '' : 's'}`;
                          
                          const latestDate = document.createElement('span');
                          latestDate.textContent = `Latest: ${formatRelativeTime(group.latestTimestamp)}`;
                          
                          meta.appendChild(count);
                          meta.appendChild(latestDate);
                          
                          header.appendChild(title);
                          header.appendChild(meta);
                          
                          const timeline = document.createElement('div');
                          timeline.className = 'preview-timeline';
                          
                          group.previews.forEach((preview, index) => {
                              const item = document.createElement('div');
                              item.className = `preview-item ${index === 0 ? 'latest' : 'older'}`;
                              
                              const info = document.createElement('div');
                              info.className = 'preview-info';
                              
                              const date = document.createElement('div');
                              date.className = 'preview-date';
                              date.textContent = formatDate(preview.timestamp);
                              
                              const age = document.createElement('div');
                              age.className = 'preview-age';
                              age.textContent = formatRelativeTime(preview.timestamp);
                              
                              info.appendChild(date);
                              info.appendChild(age);
                              
                              const actions = document.createElement('div');
                              actions.className = 'preview-actions';
                              
                              if (index === 0) {
                                  const badge = document.createElement('span');
                                  badge.className = 'latest-badge';
                                  badge.textContent = 'Latest';
                                  actions.appendChild(badge);
                              }
                              
                              const link = document.createElement('a');
                              link.className = `preview-link ${index === 0 ? 'latest' : ''}`;
                              link.href = preview.url;
                              link.target = '_blank';
                              link.rel = 'noopener noreferrer';
                              link.innerHTML = `View Preview <span>→</span>`;
                              
                              actions.appendChild(link);
                              
                              item.appendChild(info);
                              item.appendChild(actions);
                              
                              timeline.appendChild(item);
                          });
                          
                          prGroup.appendChild(header);
                          prGroup.appendChild(timeline);
                          
                          prGroupsContainer.appendChild(prGroup);
                      });
                      
                      container.innerHTML = '';
                      container.appendChild(prGroupsContainer);
                  }
                  
                  // Render previews when page loads
                  renderPreviews();
              </script>
          </body>
          </html>
          EOF

          # Collect all preview directories and generate JSON data
          PREVIEW_DATA="["
          FIRST=true

          if [ -d previews ]; then
            for preview_dir in previews/pr*-*; do
              if [ -d "$preview_dir" ] && [ "$preview_dir" != "previews/pr*-*" ]; then
                folder_name=$(basename "$preview_dir")
                preview_url="https://$REPO_OWNER.github.io/$REPO_NAME/${preview_dir}/"
                
                if [ "$FIRST" = true ]; then
                  FIRST=false
                else
                  PREVIEW_DATA="$PREVIEW_DATA,"
                fi
                
                PREVIEW_DATA="$PREVIEW_DATA{\"name\":\"$folder_name\",\"url\":\"$preview_url\"}"
              fi
            done
          fi

          PREVIEW_DATA="$PREVIEW_DATA]"

          # Replace placeholders in the HTML
          sed -i "s|REPO_OWNER|$REPO_OWNER|g" previews/index.html
          sed -i "s|REPO_NAME|$REPO_NAME|g" previews/index.html
          sed -i "s|PREVIEW_DATA_PLACEHOLDER|$PREVIEW_DATA|g" previews/index.html

          echo "Generated previews index with $(echo "$PREVIEW_DATA" | grep -o '{' | wc -l) preview(s)"

      - name: Remove old PR previews
        working-directory: gh-pages
        run: |
          # Remove previews older than 30 days
          if [ -d previews ]; then
            find previews -maxdepth 1 -type d -name "pr*-*" | while read preview_folder; do
              folder_epoch=$(echo "$preview_folder" | sed 's/.*-\([0-9]\{10,\}\)$/\1/')
              if [[ "$folder_epoch" =~ ^[0-9]{10,}$ ]]; then
                folder_timestamp="$folder_epoch"
                current_timestamp=$(date +%s)
                thirty_days_ago=$((current_timestamp - 30 * 24 * 60 * 60))
                if [[ "$folder_timestamp" -lt "$thirty_days_ago" && "$folder_timestamp" -gt "0" ]]; then
                  echo "Removing old preview: $preview_folder (older than 30 days)"
                  rm -rf "$preview_folder"
                fi
              fi
            done
          fi

      - name: Add Main
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: gh-pages
        run: |
          cp -r ../repo/docs/* ./ || true

      - name: Commit and push
        working-directory: gh-pages
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add/update PR #${{ github.event.number }} preview deployment"
            git push origin HEAD:gh-pages
          fi

      - name: Comment PR with GitHub Pages preview URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        continue-on-error: true
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // const botComment = comments.find(comment => 
            //   comment.user.type === 'Bot' && 
            //   comment.body.includes('GitHub Pages Preview deployment')
            // );

            const body = `## GitHub Pages Preview deployment

            ✅ **Preview deployed at:** ${{ steps.pr-preview.outputs.preview-url }}
            🧹 **Cleanup:** Preview folders older than 30 days are automatically removed.`;

            // if (botComment) {
            //   await github.rest.issues.updateComment({
            //     owner: context.repo.owner,
            //     repo: context.repo.repo,
            //     comment_id: botComment.id,
            //     body: body
            //   });
            // } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
            // }

  # deploy-pages:
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: needs.build.outputs.should-deploy-pages == 'true'
  #   steps:
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4
