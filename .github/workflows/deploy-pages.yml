name: Deploy Website

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      force-deploy:
        description: Deploy to GitHub Pages even if not on main branch
        required: false
        default: false
        type: boolean
      commit_sha:
        description: Specific commit SHA to deploy (optional - will use current commit if not provided)
        required: false
        type: string

permissions:
  contents: write # Changed from read to write for gh-pages branch management
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      should-deploy-pages: ${{ steps.check-deploy.outputs.should-deploy-pages }}
      preview-sha: ${{ env.PREVIEW_SHA }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: ${{ github.event.inputs.commit_sha != '' && 0 || 1 }}

      - name: Checkout specific commit SHA if provided
        if: github.event.inputs.commit_sha != ''
        run: |
          git fetch origin
          git checkout ${{ github.event.inputs.commit_sha }}

      - name: Set preview SHA environment variable
        run: |
          if [ -n "${{ github.event.inputs.commit_sha }}" ]; then
            echo "PREVIEW_SHA=${{ github.event.inputs.commit_sha }}" >> $GITHUB_ENV
          else
            echo "PREVIEW_SHA=${{ github.sha }}" >> $GITHUB_ENV
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build site data
        run: |
          npm run build
          npm run build:website

      - name: Check deployment conditions
        id: check-deploy
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.inputs.force-deploy }}" == "true" ]]; then
            echo "should-deploy-pages=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy-pages=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Pages
        if: steps.check-deploy.outputs.should-deploy-pages == 'true'
        uses: actions/configure-pages@v5

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v4
        if: steps.check-deploy.outputs.should-deploy-pages == 'true'
        with:
          path: "./docs"

  deploy-vercel:
    runs-on: ubuntu-latest
    needs: build
    if: false
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build site data for Vercel
        run: |
          npm run build
          npm run build:website

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts for Vercel
        run: vercel build ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy-vercel
        run: |
          url=$(vercel deploy --prebuilt ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT

      - name: Comment PR with Vercel preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview deployment')
            );

            const body = `## Preview deployment

            ✅ **Preview deployed successfully!**

            🔗 **Preview URL:** ${{ steps.deploy-vercel.outputs.url }}

            This preview will be updated automatically when you push new commits to this PR.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  deploy-netlify:
    runs-on: ubuntu-latest
    needs: build
    if: false
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build site data for Netlify
        run: |
          npm run build
          npm run build:website

      - name: Deploy to Netlify
        id: deploy-netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: "./docs"
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions - PR #${{ github.event.number }}"
          enable-pull-request-comment: false
          enable-commit-comment: false
          overwrites-pull-request-comment: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Comment PR with Netlify preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Netlify Preview deployment')
            );

            const body = `## Netlify Preview deployment

            ✅ **Preview deployed successfully!**

            🔗 **Netlify Preview URL:** ${{ steps.deploy-netlify.outputs.deploy-url }}

            This preview will be updated automatically when you push new commits to this PR.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  deploy-pages:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    env:
      PREVIEW_SHA: ${{ github.event.inputs.commit_sha || github.sha }}
    steps:
      # https://github.com/actions/checkout#checkout-multiple-repos-side-by-side
      - name: Checkout
        uses: actions/checkout@v5
        with:
          path: repo
          fetch-depth: ${{ github.event.inputs.commit_sha != '' && 0 || 1 }}

      - name: Checkout specific commit SHA if provided
        if: github.event.inputs.commit_sha != ''
        working-directory: repo
        run: |
          git fetch origin
          git checkout ${{ github.event.inputs.commit_sha }}

      - name: Ensure gh-pages branch exists
        working-directory: repo
        run: |
          set -e
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if git ls-remote --heads origin gh-pages | grep -q 'refs/heads/gh-pages'; then
            echo "gh-pages branch already exists"
          else
            echo "gh-pages branch not found — creating an empty gh-pages branch and pushing it"
            git checkout --orphan gh-pages
            git rm -rf . > /dev/null 2>&1 || true

            # Configure a committer for the automated commit so it won't fail
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"

            git commit --allow-empty -m "Initialize empty gh-pages branch"
            git push --set-upstream origin gh-pages
            git checkout "$CURRENT_BRANCH"
          fi

      - name: Checkout gh-pages
        uses: actions/checkout@v5
        id: checkout-gh-pages
        with:
          ref: gh-pages
          path: gh-pages

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "repo/package-lock.json"

      - name: Install dependencies
        working-directory: repo
        run: npm ci

      - name: Build site data for PR preview
        working-directory: repo
        run: |
          npm run build
          npm run build:website

      - name: Setup git config
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create PR preview deployment
        id: pr-preview
        working-directory: gh-pages
        if: github.event_name == 'pull_request'
        run: |
          set -e
          PR_NUMBER="${{ github.event.number }}"
          TIMESTAMP=$(date +%s)
          PREVIEW_DIR="previews/pr${PR_NUMBER}-${TIMESTAMP}"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="$(echo "${{ github.repository }}" | sed "s|^$REPO_OWNER/||")"

          PREVIEW_URL="https://$REPO_OWNER.github.io/$REPO_NAME/${PREVIEW_DIR}/"
          echo "preview-dir=${PREVIEW_DIR}" >> $GITHUB_OUTPUT
          echo "preview-url=${PREVIEW_URL}" >> $GITHUB_OUTPUT

          # Create/update the preview directory and copy built site from the repo checkout
          mkdir -p "${PREVIEW_DIR}"
          cp -r ../repo/docs/* "${PREVIEW_DIR}/" || true

      - name: Create manual SHA preview deployment
        id: sha-preview
        working-directory: gh-pages
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha != ''
        run: |
          set -e
          PREVIEW_DIR="previews/${{ env.PREVIEW_SHA }}"
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="$(echo "${{ github.repository }}" | sed "s|^$REPO_OWNER/||")"

          PREVIEW_URL="https://$REPO_OWNER.github.io/$REPO_NAME/${PREVIEW_DIR}/"
          echo "preview-dir=${PREVIEW_DIR}" >> $GITHUB_OUTPUT
          echo "preview-url=${PREVIEW_URL}" >> $GITHUB_OUTPUT

          # Create/update the preview directory and copy built site from the repo checkout
          mkdir -p "${PREVIEW_DIR}"
          cp -r ../repo/docs/* "${PREVIEW_DIR}/" || true

      - name: Generate previews index
        working-directory: gh-pages
        if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha != '')
        run: |
          set -e
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="$(echo "${{ github.repository }}" | sed "s|^$REPO_OWNER/||")"

          # Ensure previews directory exists
          mkdir -p previews

          # Copy the template from the repo docs directory
          cp ../repo/docs/previews-toc.html previews/index.html

          # Collect all preview directories and generate JSON data
          PREVIEW_DATA="["
          FIRST=true

          if [ -d previews ]; then
            # Include PR previews (pr*-* pattern)
            for preview_dir in previews/pr*-*; do
              if [ -d "$preview_dir" ] && [ "$preview_dir" != "previews/pr*-*" ]; then
                folder_name=$(basename "$preview_dir")
                preview_url="https://$REPO_OWNER.github.io/$REPO_NAME/${preview_dir}/"
                
                if [ "$FIRST" = true ]; then
                  FIRST=false
                else
                  PREVIEW_DATA="$PREVIEW_DATA,"
                fi
                
                PREVIEW_DATA="$PREVIEW_DATA{\"name\":\"$folder_name\",\"url\":\"$preview_url\"}"
              fi
            done
            
            # Include SHA-based previews (40-character SHA pattern)
            for preview_dir in previews/[a-f0-9]*; do
              if [ -d "$preview_dir" ] && [ "$preview_dir" != "previews/[a-f0-9]*" ]; then
                folder_name=$(basename "$preview_dir")
                # Only include if it looks like a SHA (40 hex characters)
                if [[ "$folder_name" =~ ^[a-f0-9]{40}$ ]]; then
                  preview_url="https://$REPO_OWNER.github.io/$REPO_NAME/${preview_dir}/"
                  
                  if [ "$FIRST" = true ]; then
                    FIRST=false
                  else
                    PREVIEW_DATA="$PREVIEW_DATA,"
                  fi
                  
                  PREVIEW_DATA="$PREVIEW_DATA{\"name\":\"SHA: ${folder_name:0:8}\",\"url\":\"$preview_url\"}"
                fi
              fi
            done
          fi

          PREVIEW_DATA="$PREVIEW_DATA]"

          # Replace placeholders in the HTML
          sed -i "s|REPO_OWNER|$REPO_OWNER|g" previews/index.html
          sed -i "s|REPO_NAME|$REPO_NAME|g" previews/index.html
          sed -i "s|PREVIEW_DATA_PLACEHOLDER|$PREVIEW_DATA|g" previews/index.html

          echo "Generated previews index with $(echo "$PREVIEW_DATA" | grep -o '{' | wc -l) preview(s)"

      - name: Remove old PR previews
        working-directory: gh-pages
        run: |
          # Remove previews older than 30 days
          if [ -d previews ]; then
            find previews -maxdepth 1 -type d -name "pr*-*" | while read preview_folder; do
              folder_epoch=$(echo "$preview_folder" | sed 's/.*-\([0-9]\{10,\}\)$/\1/')
              if [[ "$folder_epoch" =~ ^[0-9]{10,}$ ]]; then
                folder_timestamp="$folder_epoch"
                current_timestamp=$(date +%s)
                thirty_days_ago=$((current_timestamp - 30 * 24 * 60 * 60))
                if [[ "$folder_timestamp" -lt "$thirty_days_ago" && "$folder_timestamp" -gt "0" ]]; then
                  echo "Removing old preview: $preview_folder (older than 30 days)"
                  rm -rf "$preview_folder"
                fi
              fi
            done
          fi

      - name: Add Main
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: gh-pages
        run: |
          cp -r ../repo/docs/* ./ || true

      - name: Commit and push
        working-directory: gh-pages
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            if [ "${{ github.event_name }}" == "pull_request" ]; then
              git commit -m "Add/update PR #${{ github.event.number }} preview deployment"
            elif [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.commit_sha }}" ]; then
              git commit -m "Add/update manual SHA preview deployment: ${{ env.PREVIEW_SHA }}"
            else
              git commit -m "Update GitHub Pages deployment"
            fi
            git push origin HEAD:gh-pages
          fi

      - name: Comment PR with GitHub Pages preview URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        continue-on-error: true
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // const botComment = comments.find(comment => 
            //   comment.user.type === 'Bot' && 
            //   comment.body.includes('GitHub Pages Preview deployment')
            // );

            const body = `## GitHub Pages Preview deployment

            ✅ **Preview deployed at:** ${{ steps.pr-preview.outputs.preview-url }}
            🧹 **Cleanup:** Preview folders older than 30 days are automatically removed.`;

            // if (botComment) {
            //   await github.rest.issues.updateComment({
            //     owner: context.repo.owner,
            //     repo: context.repo.repo,
            //     comment_id: botComment.id,
            //     body: body
            //   });
            // } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
            // }

      - name: Output manual SHA deployment info
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha != ''
        run: |
          echo "## Manual SHA Preview Deployment Completed"
          echo "✅ **Preview deployed at:** ${{ steps.sha-preview.outputs.preview-url }}"
          echo "📝 **Commit SHA:** ${{ env.PREVIEW_SHA }}"
          echo "🧹 **Cleanup:** Preview folders older than 30 days are automatically removed."
          echo ""
          echo "You can access your preview at: ${{ steps.sha-preview.outputs.preview-url }}"

  # deploy-pages:
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: needs.build.outputs.should-deploy-pages == 'true'
  #   steps:
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4
