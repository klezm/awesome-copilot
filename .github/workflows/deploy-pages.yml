name: Deploy Website

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      force-deploy:
        description: Deploy to GitHub Pages even if not on main branch
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      should-deploy-pages: ${{ steps.check-deploy.outputs.should-deploy-pages }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build site data
        run: |
          npm run build
          npm run build:website

      - name: Check deployment conditions
        id: check-deploy
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.inputs.force-deploy }}" == "true" ]]; then
            echo "should-deploy-pages=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy-pages=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Pages
        if: steps.check-deploy.outputs.should-deploy-pages == 'true'
        uses: actions/configure-pages@v4

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        if: steps.check-deploy.outputs.should-deploy-pages == 'true'
        with:
          path: './docs'

  deploy-vercel:
    runs-on: ubuntu-latest
    needs: build
    if: secrets.VERCEL_TOKEN != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build site data for Vercel
        run: |
          npm run build
          npm run build:website

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts for Vercel
        run: vercel build ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy-vercel
        run: |
          url=$(vercel deploy --prebuilt ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT

      - name: Comment PR with Vercel preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview deployment')
            );

            const body = `## Preview deployment

            âœ… **Preview deployed successfully!**

            ðŸ”— **Preview URL:** ${{ steps.deploy-vercel.outputs.url }}

            This preview will be updated automatically when you push new commits to this PR.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  deploy-netlify:
    runs-on: ubuntu-latest
    needs: build
    if: secrets.NETLIFY_AUTH_TOKEN != '' && github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build site data for Netlify
        run: |
          npm run build
          npm run build:website

      - name: Deploy to Netlify
        id: deploy-netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './docs'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions - PR #${{ github.event.number }}"
          enable-pull-request-comment: false
          enable-commit-comment: false
          overwrites-pull-request-comment: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Comment PR with Netlify preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Netlify Preview deployment')
            );

            const body = `## Netlify Preview deployment

            âœ… **Preview deployed successfully!**

            ðŸ”— **Netlify Preview URL:** ${{ steps.deploy-netlify.outputs.deploy-url }}

            This preview will be updated automatically when you push new commits to this PR.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  deploy-pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.should-deploy-pages == 'true'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4