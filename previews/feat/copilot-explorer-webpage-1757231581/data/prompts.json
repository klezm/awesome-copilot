[
  {
    "title": "AI Prompt Engineering Safety Review & Improvement",
    "description": "Comprehensive AI prompt engineering safety review and improvement prompt. Analyzes prompts for safety, bias, security vulnerabilities, and effectiveness while providing detailed improvement recommendations with extensive frameworks, testing methodologies, and educational content.",
    "path": "prompts/ai-prompt-engineering-safety-review.prompt.md"
  },
  {
    "title": "Comprehensive Project Architecture Blueprint Generator",
    "description": "Comprehensive project architecture blueprint generator that analyzes codebases to create detailed architectural documentation. Automatically detects technology stacks and architectural patterns, generates visual diagrams, documents implementation patterns, and provides extensible blueprints for maintaining architectural consistency and guiding new development.",
    "path": "prompts/architecture-blueprint-generator.prompt.md"
  },
  {
    "title": "ASP.NET Minimal API with OpenAPI",
    "description": "Create ASP.NET Minimal API endpoints with proper OpenAPI documentation",
    "path": "prompts/aspnet-minimal-api-openapi.prompt.md"
  },
  {
    "title": "Azure Cost Optimize",
    "description": "Analyze Azure resources used in the app (IaC files and/or resources in a target rg) and optimize costs - creating GitHub issues for identified optimizations.",
    "path": "prompts/az-cost-optimize.prompt.md"
  },
  {
    "title": "Azure Resource Health & Issue Diagnosis",
    "description": "Analyze Azure resource health, diagnose issues from logs and telemetry, and create a remediation plan for identified problems.",
    "path": "prompts/azure-resource-health-diagnose.prompt.md"
  },
  {
    "title": "Boost Prompt",
    "description": "Interactive prompt refinement workflow: interrogates scope, deliverables, constraints; copies final markdown to clipboard; never writes code. Requires the Joyride extension.",
    "path": "prompts/boost-prompt.prompt.md"
  },
  {
    "title": "Epic Architecture Specification Prompt",
    "description": "Prompt for creating the high-level technical architecture for an Epic, based on a Product Requirements Document.",
    "path": "prompts/breakdown-epic-arch.prompt.md"
  },
  {
    "title": "Epic Product Requirements Document (PRD) Prompt",
    "description": "Prompt for creating an Epic Product Requirements Document (PRD) for a new epic. This PRD will be used as input for generating a technical architecture specification.",
    "path": "prompts/breakdown-epic-pm.prompt.md"
  },
  {
    "title": "Feature Implementation Plan Prompt",
    "description": "Prompt for creating detailed feature implementation plans, following Epoch monorepo structure.",
    "path": "prompts/breakdown-feature-implementation.prompt.md"
  },
  {
    "title": "Feature PRD Prompt",
    "description": "Prompt for creating Product Requirements Documents (PRDs) for new features, based on an Epic.",
    "path": "prompts/breakdown-feature-prd.prompt.md"
  },
  {
    "title": "GitHub Issue Planning & Project Automation Prompt",
    "description": "Issue Planning and Automation prompt that generates comprehensive project plans with Epic > Feature > Story/Enabler > Test hierarchy, dependencies, priorities, and automated tracking.",
    "path": "prompts/breakdown-plan.prompt.md"
  },
  {
    "title": "Test Planning & Quality Assurance Prompt",
    "description": "Test Planning and Quality Assurance prompt that generates comprehensive test strategies, task breakdowns, and quality validation plans for GitHub projects.",
    "path": "prompts/breakdown-test.prompt.md"
  },
  {
    "title": "Clojure Memory Updater",
    "description": "Have the agent update the clojure-memory.instructions.md file with mistakes it just made, or lessons learned. Also consider installing the default clojure-memory.instructions.md",
    "path": "prompts/clojure-add-to-memory.prompt.md"
  },
  {
    "title": "Code Exemplars Blueprint Generator",
    "description": "Technology-agnostic prompt generator that creates customizable AI prompts for scanning codebases and identifying high-quality code exemplars. Supports multiple programming languages (.NET, Java, JavaScript, TypeScript, React, Angular, Python) with configurable analysis depth, categorization methods, and documentation formats to establish coding standards and maintain consistency across development teams.",
    "path": "prompts/code-exemplars-blueprint-generator.prompt.md"
  },
  {
    "title": "Comment Code Generate A Tutorial",
    "description": "Transform this Python script into a polished, beginner-friendly project by refactoring the code, adding clear instructional comments, and generating a complete markdown tutorial.",
    "path": "prompts/comment-code-generate-a-tutorial.prompt.md"
  },
  {
    "title": "ASP.NET .NET Framework Containerization Prompt",
    "description": "Containerize an ASP.NET .NET Framework project by creating Dockerfile and .dockerfile files customized for the project.",
    "path": "prompts/containerize-aspnet-framework.prompt.md"
  },
  {
    "title": "ASP.NET Core Docker Containerization Prompt",
    "description": "Containerize an ASP.NET Core project by creating Dockerfile and .dockerfile files customized for the project.",
    "path": "prompts/containerize-aspnetcore.prompt.md"
  },
  {
    "title": "Copilot Instructions Blueprint Generator",
    "description": "Technology-agnostic blueprint generator for creating comprehensive copilot-instructions.md files that guide GitHub Copilot to produce code consistent with project standards, architecture patterns, and exact technology versions by analyzing existing codebase patterns and avoiding assumptions.",
    "path": "prompts/copilot-instructions-blueprint-generator.prompt.md"
  },
  {
    "title": "Create highâ€‘quality AGENTS.md file",
    "description": "Prompt for generating an AGENTS.md file for a repository",
    "path": "prompts/create-agentsmd.prompt.md"
  },
  {
    "title": "Create Architectural Decision Record",
    "description": "Create an Architectural Decision Record (ADR) document for AI-optimized decision documentation.",
    "path": "prompts/create-architectural-decision-record.prompt.md"
  },
  {
    "title": "Create GitHub Actions Workflow Specification",
    "description": "Create a formal specification for an existing GitHub Actions CI/CD workflow, optimized for AI consumption and workflow maintenance.",
    "path": "prompts/create-github-action-workflow-specification.prompt.md"
  },
  {
    "title": "Create GitHub Issue from Specification",
    "description": "Create GitHub Issue for feature request from specification file using feature_request.yml template.",
    "path": "prompts/create-github-issue-feature-from-specification.prompt.md"
  },
  {
    "title": "Create GitHub Issue from Implementation Plan",
    "description": "Create GitHub Issues from implementation plan phases using feature_request.yml or chore_request.yml templates.",
    "path": "prompts/create-github-issues-feature-from-implementation-plan.prompt.md"
  },
  {
    "title": "Create GitHub Issues for Unmet Specification Requirements",
    "description": "Create GitHub Issues for unimplemented requirements from specification files using feature_request.yml template.",
    "path": "prompts/create-github-issues-for-unmet-specification-requirements.prompt.md"
  },
  {
    "title": "Create GitHub Pull Request from Specification",
    "description": "Create GitHub Pull Request for feature request from specification file using pull_request_template.md template.",
    "path": "prompts/create-github-pull-request-from-specification.prompt.md"
  },
  {
    "title": "Create Implementation Plan",
    "description": "Create a new implementation plan file for new features, refactoring existing code or upgrading packages, design, architecture or infrastructure.",
    "path": "prompts/create-implementation-plan.prompt.md"
  },
  {
    "title": "Create LLMs.txt File from Repository Structure",
    "description": "Create an llms.txt file from scratch based on repository structure following the llms.txt specification at https://llmstxt.org/",
    "path": "prompts/create-llms.prompt.md"
  },
  {
    "title": "Generate Standard OO Component Documentation",
    "description": "Create comprehensive, standardized documentation for object-oriented components following industry best practices and architectural documentation standards.",
    "path": "prompts/create-oo-component-documentation.prompt.md"
  },
  {
    "title": "Create Readme",
    "description": "Create a README.md file for the project",
    "path": "prompts/create-readme.prompt.md"
  },
  {
    "title": "Create Specification",
    "description": "Create a new specification file for the solution, optimized for Generative AI consumption.",
    "path": "prompts/create-specification.prompt.md"
  },
  {
    "title": "Create Spring Boot Java project prompt",
    "description": "Create Spring Boot Java project skeleton",
    "path": "prompts/create-spring-boot-java-project.prompt.md"
  },
  {
    "title": "Create Spring Boot Kotlin project prompt",
    "description": "Create Spring Boot Kotlin project skeleton",
    "path": "prompts/create-spring-boot-kotlin-project.prompt.md"
  },
  {
    "title": "C# Async Programming Best Practices",
    "description": "Get best practices for C# async programming",
    "path": "prompts/csharp-async.prompt.md"
  },
  {
    "title": "C# Documentation Best Practices",
    "description": "Ensure that C# types are documented with XML comments and follow best practices for documentation.",
    "path": "prompts/csharp-docs.prompt.md"
  },
  {
    "title": "MSTest Best Practices",
    "description": "Get best practices for MSTest unit testing, including data-driven tests",
    "path": "prompts/csharp-mstest.prompt.md"
  },
  {
    "title": "NUnit Best Practices",
    "description": "Get best practices for NUnit unit testing, including data-driven tests",
    "path": "prompts/csharp-nunit.prompt.md"
  },
  {
    "title": "TUnit Best Practices",
    "description": "Get best practices for TUnit unit testing, including data-driven tests",
    "path": "prompts/csharp-tunit.prompt.md"
  },
  {
    "title": "XUnit Best Practices",
    "description": "Get best practices for XUnit unit testing, including data-driven tests",
    "path": "prompts/csharp-xunit.prompt.md"
  },
  {
    "title": "DiÃ¡taxis Documentation Expert",
    "description": "DiÃ¡taxis Documentation Expert. An expert technical writer specializing in creating high-quality software documentation, guided by the principles and structure of the DiÃ¡taxis technical documentation authoring framework.",
    "path": "prompts/documentation-writer.prompt.md"
  },
  {
    "title": ".NET/C# Best Practices",
    "description": "Ensure .NET/C# code meets best practices for the solution/project.",
    "path": "prompts/dotnet-best-practices.prompt.md"
  },
  {
    "title": ".NET/C# Design Pattern Review",
    "description": "Review the C#/.NET code for design pattern implementation and suggest improvements.",
    "path": "prompts/dotnet-design-pattern-review.prompt.md"
  },
  {
    "title": "EditorConfig Expert",
    "description": "Generates a comprehensive and best-practice-oriented .editorconfig file based on project analysis and user preferences.",
    "path": "prompts/editorconfig.prompt.md"
  },
  {
    "title": "Entity Framework Core Best Practices",
    "description": "Get best practices for Entity Framework Core",
    "path": "prompts/ef-core.prompt.md"
  },
  {
    "title": "Act Informed: First understand together with the human, then do",
    "description": "Interactive, input-tool powered, task refinement workflow: interrogates scope, deliverables, constraints before carrying out the task; Requires the Joyride extension.",
    "path": "prompts/first-ask.prompt.md"
  },
  {
    "title": "Project Folder Structure Blueprint Generator",
    "description": "Comprehensive technology-agnostic prompt for analyzing and documenting project folder structures. Auto-detects project types (.NET, Java, React, Angular, Python, Node.js, Flutter), generates detailed blueprints with visualization options, naming conventions, file placement patterns, and extension templates for maintaining consistent code organization across diverse technology stacks.",
    "path": "prompts/folder-structure-blueprint-generator.prompt.md"
  },
  {
    "title": "Product Manager Assistant: Feature Identification and Specification",
    "description": "This workflow guides you through a systematic approach to identify missing features, prioritize them, and create detailed specifications for implementation.",
    "path": "prompts/gen-specs-as-issues.prompt.md"
  },
  {
    "title": "Migration and Code Evolution Instructions Generator",
    "description": "Migration and code evolution instructions generator for GitHub Copilot. Analyzes differences between two project versions (branches, commits, or releases) to create precise instructions allowing Copilot to maintain consistency during technology migrations, major refactoring, or framework version upgrades.",
    "path": "prompts/generate-custom-instructions-from-codebase.prompt.md"
  },
  {
    "title": "Git Flow Branch Creator",
    "description": "Intelligent Git Flow branch creator that analyzes git status/diff and creates appropriate branches following the nvie Git Flow branching model.",
    "path": "prompts/git-flow-branch-creator.prompt.md"
  },
  {
    "title": "Java Documentation (Javadoc) Best Practices",
    "description": "Ensure that Java types are documented with Javadoc comments and follow best practices for documentation.",
    "path": "prompts/java-docs.prompt.md"
  },
  {
    "title": "JUnit 5+ Best Practices",
    "description": "Get best practices for JUnit 5 unit testing, including data-driven tests",
    "path": "prompts/java-junit.prompt.md"
  },
  {
    "title": "Spring Boot Best Practices",
    "description": "Get best practices for developing applications with Spring Boot.",
    "path": "prompts/java-springboot.prompt.md"
  },
  {
    "title": "Javascript Typescript Jest",
    "description": "Best practices for writing JavaScript/TypeScript tests using Jest, including mocking strategies, test structure, and common patterns.",
    "path": "prompts/javascript-typescript-jest.prompt.md"
  },
  {
    "title": "Spring Boot with Kotlin Best Practices",
    "description": "Get best practices for developing applications with Spring Boot and Kotlin.",
    "path": "prompts/kotlin-springboot.prompt.md"
  },
  {
    "title": "MkDocs AI Translator",
    "description": "Generate a language translation for a mkdocs documentation stack.",
    "path": "prompts/mkdocs-translations.prompt.md"
  },
  {
    "title": "Multi Stage Dockerfile",
    "description": "Create optimized multi-stage Dockerfiles for any language or framework",
    "path": "prompts/multi-stage-dockerfile.prompt.md"
  },
  {
    "title": "My Issues",
    "description": "List my issues in the current repository",
    "path": "prompts/my-issues.prompt.md"
  },
  {
    "title": "My Pull Requests",
    "description": "List my pull requests in the current repository",
    "path": "prompts/my-pull-requests.prompt.md"
  },
  {
    "title": "Next Intl Add Language",
    "description": "Add new language to a Next.js + next-intl application",
    "path": "prompts/next-intl-add-language.prompt.md"
  },
  {
    "title": "Automating Filling in a Form with Playwright MCP",
    "description": "Automate filling in a form using Playwright MCP",
    "path": "prompts/playwright-automation-fill-in-form.prompt.md"
  },
  {
    "title": "Website Exploration for Testing",
    "description": "Website exploration for testing using Playwright MCP",
    "path": "prompts/playwright-explore-website.prompt.md"
  },
  {
    "title": "Test Generation with Playwright MCP",
    "description": "Generate a Playwright test based on a scenario using Playwright MCP",
    "path": "prompts/playwright-generate-test.prompt.md"
  },
  {
    "title": "PostgreSQL Code Review Assistant",
    "description": "PostgreSQL-specific code review assistant focusing on PostgreSQL best practices, anti-patterns, and unique quality standards. Covers JSONB operations, array usage, custom types, schema design, function optimization, and PostgreSQL-exclusive security features like Row Level Security (RLS).",
    "path": "prompts/postgresql-code-review.prompt.md"
  },
  {
    "title": "PostgreSQL Development Assistant",
    "description": "PostgreSQL-specific development assistant focusing on unique PostgreSQL features, advanced data types, and PostgreSQL-exclusive capabilities. Covers JSONB operations, array types, custom types, range/geometric types, full-text search, window functions, and PostgreSQL extensions ecosystem.",
    "path": "prompts/postgresql-optimization.prompt.md"
  },
  {
    "title": "Project Workflow Documentation Generator",
    "description": "Comprehensive technology-agnostic prompt generator for documenting end-to-end application workflows. Automatically detects project architecture patterns, technology stacks, and data flow patterns to generate detailed implementation blueprints covering entry points, service layers, data access, error handling, and testing approaches across multiple technologies including .NET, Java/Spring, React, and microservices architectures.",
    "path": "prompts/project-workflow-analysis-blueprint-generator.prompt.md"
  },
  {
    "title": "Professional Prompt Builder",
    "description": "Guide users through creating high-quality GitHub Copilot prompts with proper structure, tools, and best practices.",
    "path": "prompts/prompt-builder.prompt.md"
  },
  {
    "title": "README Generator Prompt",
    "description": "Intelligent README.md generation prompt that analyzes project documentation structure and creates comprehensive repository documentation. Scans .github/copilot directory files and copilot-instructions.md to extract project information, technology stack, architecture, development workflow, coding standards, and testing approaches while generating well-structured markdown documentation with proper formatting, cross-references, and developer-focused content.",
    "path": "prompts/readme-blueprint-generator.prompt.md"
  },
  {
    "title": "Interactive Programming Nudge",
    "description": "Reminds the agent that it is an interactive programmer. Works great in Clojure when Copilot has access to the REPL (probably via Backseat Driver). Will work with any system that has a live REPL that the agent can use. Adapt the prompt with any specific reminders in your workflow and/or workspace.",
    "path": "prompts/remember-interactive-programming.prompt.md"
  },
  {
    "title": "Repository Analysis: [Repo Name]",
    "description": "Generate a comprehensive repository summary and narrative story from commit history",
    "path": "prompts/repo-story-time.prompt.md"
  },
  {
    "title": "Review And Refactor",
    "description": "Review and refactor code in your project according to defined instructions",
    "path": "prompts/review-and-refactor.prompt.md"
  },
  {
    "title": "SQL Code Review",
    "description": "Universal SQL code review assistant that performs comprehensive security, maintainability, and code quality analysis across all SQL databases (MySQL, PostgreSQL, SQL Server, Oracle). Focuses on SQL injection prevention, access control, code standards, and anti-pattern detection. Complements SQL optimization prompt for complete development coverage.",
    "path": "prompts/sql-code-review.prompt.md"
  },
  {
    "title": "SQL Performance Optimization Assistant",
    "description": "Universal SQL performance optimization assistant for comprehensive query tuning, indexing strategies, and database performance analysis across all SQL databases (MySQL, PostgreSQL, SQL Server, Oracle). Provides execution plan analysis, pagination optimization, batch operations, and performance monitoring guidance.",
    "path": "prompts/sql-optimization.prompt.md"
  },
  {
    "title": "Suggest Awesome GitHub Copilot Chatmodes",
    "description": "Suggest relevant GitHub Copilot chatmode files from the awesome-copilot repository based on current repository context and chat history, avoiding duplicates with existing chatmodes in this repository.",
    "path": "prompts/suggest-awesome-github-copilot-chatmodes.prompt.md"
  },
  {
    "title": "Suggest Awesome GitHub Copilot Prompts",
    "description": "Suggest relevant GitHub Copilot prompt files from the awesome-copilot repository based on current repository context and chat history, avoiding duplicates with existing prompts in this repository.",
    "path": "prompts/suggest-awesome-github-copilot-prompts.prompt.md"
  },
  {
    "title": "Comprehensive Technology Stack Blueprint Generator",
    "description": "Comprehensive technology stack blueprint generator that analyzes codebases to create detailed architectural documentation. Automatically detects technology stacks, programming languages, and implementation patterns across multiple platforms (.NET, Java, JavaScript, React, Python). Generates configurable blueprints with version information, licensing details, usage patterns, coding conventions, and visual diagrams. Provides implementation-ready templates and maintains architectural consistency for guided development.",
    "path": "prompts/technology-stack-blueprint-generator.prompt.md"
  },
  {
    "title": "Update Azure Verified Modules in Bicep Files",
    "description": "Update Azure Verified Modules (AVM) to latest versions in Bicep files.",
    "path": "prompts/update-avm-modules-in-bicep.prompt.md"
  },
  {
    "title": "Update Implementation Plan",
    "description": "Update an existing implementation plan file with new or update requirements to provide new features, refactoring existing code or upgrading packages, design, architecture or infrastructure.",
    "path": "prompts/update-implementation-plan.prompt.md"
  },
  {
    "title": "Update LLMs.txt File",
    "description": "Update the llms.txt file in the root folder to reflect changes in documentation or specifications following the llms.txt specification at https://llmstxt.org/",
    "path": "prompts/update-llms.prompt.md"
  },
  {
    "title": "Update Markdown File Index",
    "description": "Update a markdown file section with an index/table of files from a specified folder.",
    "path": "prompts/update-markdown-file-index.prompt.md"
  },
  {
    "title": "Update Standard OO Component Documentation",
    "description": "Update existing object-oriented component documentation following industry best practices and architectural documentation standards.",
    "path": "prompts/update-oo-component-documentation.prompt.md"
  },
  {
    "title": "Update Specification",
    "description": "Update an existing specification file for the solution, optimized for Generative AI consumption based on new requirements or updates to any existing code.",
    "path": "prompts/update-specification.prompt.md"
  }
]